operation:
  secretName: operation
  slackWebhook: "https://hooks.slack.com/services/some/random/text"

basicAuth:
  secretName: basic-auth
  username: "nemesis"
  # Add a value to the password field to set a static password
  password: "{{ nemesis_server_password }}"

aws:
  secretName: aws-creds
  accessKeyId: not-applicable
  secretKey: not-applicable

rabbitmq:
  secretName: rabbitmq-creds
  # admin username
  username: "nemesis"
  # admin password
  password: "{{ nemesis_server_password }}"
  # If the username or password is changed, the connectionUri will need to be updated
  connectionUri: "amqp://nemesis:{{ nemesis_server_password }}@nemesis-rabbitmq-svc:5672/"
  erlangCookie: "default-cookie"

grafana:
  secretName: grafana-creds
  username: "nemesis"
  # Add a value to the password field to set a static password
  password: "{{ nemesis_server_password }}"

minio:
  secretName: minio-creds
  rootUser: nemesis
  # Add a value to the rootPassword field to set a static password
  rootPassword: "{{ nemesis_server_password }}"

elasticsearch:
  secretName: elasticsearch-creds
  user: "nemesis"
  # NOTE: if you're use persist "production" storage, this needs to be set to a static value
  #   ahead of time for services to play nicely together
  # Set the elasticsearch password to the same value as basic-auth password
  password: "{{ nemesis_server_password }}"

dashboard:
  secretName: dashboard-creds
  username: "nemesis"
  # not actually used anymore as auth is disabled for the dashboard
  password: "{{ nemesis_server_password }}"

postgres:
  secretName: postgres-creds
  username: "nemesis"
  password: {{ nemesis_server_password }}
  pgadminEmail: "nemesis@nemesis.com"
  # Add a value to the password field to set a static password
  pgadminPassword: "{{ nemesis_server_password }}"

jupyter:
  secretName: jupyter-creds
  # Add a value to the token field to set a static password
  token:

tls:
  secretName: nemesis-cert
  enable: true